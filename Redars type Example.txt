1. File Uploads
You can upload files using the sendKeys method or the Java Robot class for more complex scenarios.

Using sendKeys:
Java

WebElement uploadElement = driver.findElement(By.id("uploadFile"));
uploadElement.sendKeys("path/to/your/file.txt");
AI-generated code. Review and use carefully. More info on FAQ.
Using Robot Class:
Java

import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;

WebElement uploadButton = driver.findElement(By.id("uploadFile"));
uploadButton.click();

Robot robot = new Robot();
StringSelection filePath = new StringSelection("path/to/your/file.txt");
Toolkit.getDefaultToolkit().getSystemClipboard().setContents(filePath, null);

robot.keyPress(KeyEvent.VK_CONTROL);
robot.keyPress(KeyEvent.VK_V);
robot.keyRelease(KeyEvent.VK_V);
robot.keyRelease(KeyEvent.VK_CONTROL);
robot.keyPress(KeyEvent.VK_ENTER);
robot.keyRelease(KeyEvent.VK_ENTER);
AI-generated code. Review and use carefully. More info on FAQ.
2. Reading from Excel Files
You can use libraries like Apache POI to read data from Excel files.

Example:
Java

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class ExcelReader {
    public static void main(String[] args) throws IOException {
        FileInputStream file = new FileInputStream(new File("path/to/your/file.xlsx"));
        Workbook workbook = new XSSFWorkbook(file);
        Sheet sheet = workbook.getSheetAt(0);
        for (Row row : sheet) {
            for (Cell cell : row) {
                switch (cell.getCellType()) {
                    case STRING:
                        System.out.print(cell.getStringCellValue() + "\t");
                        break;
                    case NUMERIC:
                        System.out.print(cell.getNumericCellValue() + "\t");
                        break;
                    default:
                        break;
                }
            }
            System.out.println();
        }
        workbook.close();
        file.close();
    }
}
AI-generated code. Review and use carefully. More info on FAQ.
3. Reading from JSON Files
You can use libraries like Jackson or Gson to parse JSON files.

Example using Jackson:
Java

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.util.Map;

public class JsonReader {
    public static void main(String[] args) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> data = mapper.readValue(new File("path/to/your/file.json"), Map.class);
        System.out.println(data);
    }
}
AI-generated code. Review and use carefully. More info on FAQ.
4. Reading from CSV Files
You can use libraries like OpenCSV to read data from CSV files.

Example:
Java

import com.opencsv.CSVReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

public class CsvReader {
    public static void main(String[] args) throws IOException {
        CSVReader reader = new CSVReader(new FileReader("path/to/your/file.csv"));
        List<String[]> allData = reader.readAll();
        for (String[] row : allData) {
            for (String cell : row) {
                System.out.print(cell + "\t");
            }
            System.out.println();
        }
        reader.close();
    }
}
AI-generated code. Review and use carefully. More info on FAQ.
These examples show how you can extend Selenium WebDriver with Java to handle various file types, making your test automation more versatile and powerful. For more detailed guides, you can refer to resources like GeeksforGeeks1 and Baeldung2.

Would you like more details on any specific file type or method?